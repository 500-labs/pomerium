// Package cluster provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package cluster

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /autocert/files)
	AutocertList(w http.ResponseWriter, r *http.Request, params AutocertListParams)

	// (DELETE /autocert/files/{key})
	AutocertDelete(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertDeleteParams)

	// (GET /autocert/files/{key})
	AutocertLoad(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertLoadParams)

	// (HEAD /autocert/files/{key})
	AutocertStat(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStatParams)

	// (PUT /autocert/files/{key})
	AutocertStore(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStoreParams)

	// (DELETE /autocert/locks/{lockName})
	AutocertUnlock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertUnlockParams)

	// (POST /autocert/locks/{lockName})
	AutocertLock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertLockParams)

	// (GET /bootstrap)
	GetClusterBootstrapConfig(w http.ResponseWriter, r *http.Request)

	// (GET /bundles)
	GetClusterResourceBundles(w http.ResponseWriter, r *http.Request)

	// (GET /bundles/{bundleId}/download)
	DownloadClusterResourceBundle(w http.ResponseWriter, r *http.Request, bundleId BundleId)

	// (POST /bundles/{bundleId}/status)
	ReportClusterResourceBundleStatus(w http.ResponseWriter, r *http.Request, bundleId BundleId)

	// (POST /exchangeToken)
	ExchangeClusterIdentityToken(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (GET /autocert/files)
func (_ Unimplemented) AutocertList(w http.ResponseWriter, r *http.Request, params AutocertListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /autocert/files/{key})
func (_ Unimplemented) AutocertDelete(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertDeleteParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /autocert/files/{key})
func (_ Unimplemented) AutocertLoad(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertLoadParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (HEAD /autocert/files/{key})
func (_ Unimplemented) AutocertStat(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStatParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /autocert/files/{key})
func (_ Unimplemented) AutocertStore(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStoreParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /autocert/locks/{lockName})
func (_ Unimplemented) AutocertUnlock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertUnlockParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /autocert/locks/{lockName})
func (_ Unimplemented) AutocertLock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertLockParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /bootstrap)
func (_ Unimplemented) GetClusterBootstrapConfig(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /bundles)
func (_ Unimplemented) GetClusterResourceBundles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /bundles/{bundleId}/download)
func (_ Unimplemented) DownloadClusterResourceBundle(w http.ResponseWriter, r *http.Request, bundleId BundleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /bundles/{bundleId}/status)
func (_ Unimplemented) ReportClusterResourceBundleStatus(w http.ResponseWriter, r *http.Request, bundleId BundleId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /exchangeToken)
func (_ Unimplemented) ExchangeClusterIdentityToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AutocertList operation middleware
func (siw *ServerInterfaceWrapper) AutocertList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertListParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", r.URL.Query(), &params.Prefix)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "prefix", Err: err})
		return
	}

	// ------------- Optional query parameter "recursive" -------------

	err = runtime.BindQueryParameter("form", true, false, "recursive", r.URL.Query(), &params.Recursive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recursive", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertList(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertDelete operation middleware
func (siw *ServerInterfaceWrapper) AutocertDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "key" -------------
	var key AutocertKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertDeleteParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertDelete(w, r, key, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertLoad operation middleware
func (siw *ServerInterfaceWrapper) AutocertLoad(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "key" -------------
	var key AutocertKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertLoadParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertLoad(w, r, key, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertStat operation middleware
func (siw *ServerInterfaceWrapper) AutocertStat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "key" -------------
	var key AutocertKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertStatParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertStat(w, r, key, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertStore operation middleware
func (siw *ServerInterfaceWrapper) AutocertStore(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "key" -------------
	var key AutocertKey

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, chi.URLParam(r, "key"), &key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertStoreParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertStore(w, r, key, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertUnlock operation middleware
func (siw *ServerInterfaceWrapper) AutocertUnlock(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "lockName" -------------
	var lockName AutocertLockName

	err = runtime.BindStyledParameterWithLocation("simple", false, "lockName", runtime.ParamLocationPath, chi.URLParam(r, "lockName"), &lockName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lockName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertUnlockParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertUnlock(w, r, lockName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AutocertLock operation middleware
func (siw *ServerInterfaceWrapper) AutocertLock(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "lockName" -------------
	var lockName AutocertLockName

	err = runtime.BindStyledParameterWithLocation("simple", false, "lockName", runtime.ParamLocationPath, chi.URLParam(r, "lockName"), &lockName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lockName", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AutocertLockParams

	// ------------- Required query parameter "fencingToken" -------------

	if paramValue := r.URL.Query().Get("fencingToken"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "fencingToken"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "fencingToken", r.URL.Query(), &params.FencingToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fencingToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AutocertLock(w, r, lockName, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClusterBootstrapConfig operation middleware
func (siw *ServerInterfaceWrapper) GetClusterBootstrapConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterBootstrapConfig(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetClusterResourceBundles operation middleware
func (siw *ServerInterfaceWrapper) GetClusterResourceBundles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetClusterResourceBundles(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DownloadClusterResourceBundle operation middleware
func (siw *ServerInterfaceWrapper) DownloadClusterResourceBundle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bundleId" -------------
	var bundleId BundleId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bundleId", runtime.ParamLocationPath, chi.URLParam(r, "bundleId"), &bundleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bundleId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DownloadClusterResourceBundle(w, r, bundleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReportClusterResourceBundleStatus operation middleware
func (siw *ServerInterfaceWrapper) ReportClusterResourceBundleStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bundleId" -------------
	var bundleId BundleId

	err = runtime.BindStyledParameterWithLocation("simple", false, "bundleId", runtime.ParamLocationPath, chi.URLParam(r, "bundleId"), &bundleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bundleId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportClusterResourceBundleStatus(w, r, bundleId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ExchangeClusterIdentityToken operation middleware
func (siw *ServerInterfaceWrapper) ExchangeClusterIdentityToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExchangeClusterIdentityToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/autocert/files", wrapper.AutocertList)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/autocert/files/{key}", wrapper.AutocertDelete)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/autocert/files/{key}", wrapper.AutocertLoad)
	})
	r.Group(func(r chi.Router) {
		r.Head(options.BaseURL+"/autocert/files/{key}", wrapper.AutocertStat)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/autocert/files/{key}", wrapper.AutocertStore)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/autocert/locks/{lockName}", wrapper.AutocertUnlock)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/autocert/locks/{lockName}", wrapper.AutocertLock)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/bootstrap", wrapper.GetClusterBootstrapConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/bundles", wrapper.GetClusterResourceBundles)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/bundles/{bundleId}/download", wrapper.DownloadClusterResourceBundle)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/bundles/{bundleId}/status", wrapper.ReportClusterResourceBundleStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/exchangeToken", wrapper.ExchangeClusterIdentityToken)
	})

	return r
}

type AutocertListRequestObject struct {
	Params AutocertListParams
}

type AutocertListResponseObject interface {
	VisitAutocertListResponse(w http.ResponseWriter) error
}

type AutocertList200JSONResponse []string

func (response AutocertList200JSONResponse) VisitAutocertListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AutocertDeleteRequestObject struct {
	Key    AutocertKey `json:"key"`
	Params AutocertDeleteParams
}

type AutocertDeleteResponseObject interface {
	VisitAutocertDeleteResponse(w http.ResponseWriter) error
}

type AutocertDelete204Response struct {
}

func (response AutocertDelete204Response) VisitAutocertDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AutocertLoadRequestObject struct {
	Key    AutocertKey `json:"key"`
	Params AutocertLoadParams
}

type AutocertLoadResponseObject interface {
	VisitAutocertLoadResponse(w http.ResponseWriter) error
}

type AutocertLoad200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response AutocertLoad200ApplicationoctetStreamResponse) VisitAutocertLoadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AutocertStatRequestObject struct {
	Key    AutocertKey `json:"key"`
	Params AutocertStatParams
}

type AutocertStatResponseObject interface {
	VisitAutocertStatResponse(w http.ResponseWriter) error
}

type AutocertStat204ResponseHeaders struct {
	XIsTerminal bool
}

type AutocertStat204Response struct {
	Headers AutocertStat204ResponseHeaders
}

func (response AutocertStat204Response) VisitAutocertStatResponse(w http.ResponseWriter) error {
	w.Header().Set("X-Is-Terminal", fmt.Sprint(response.Headers.XIsTerminal))
	w.WriteHeader(204)
	return nil
}

type AutocertStoreRequestObject struct {
	Key    AutocertKey `json:"key"`
	Params AutocertStoreParams
	Body   io.Reader
}

type AutocertStoreResponseObject interface {
	VisitAutocertStoreResponse(w http.ResponseWriter) error
}

type AutocertStore200ApplicationoctetStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response AutocertStore200ApplicationoctetStreamResponse) VisitAutocertStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type AutocertUnlockRequestObject struct {
	LockName AutocertLockName `json:"lockName"`
	Params   AutocertUnlockParams
}

type AutocertUnlockResponseObject interface {
	VisitAutocertUnlockResponse(w http.ResponseWriter) error
}

type AutocertUnlock204Response struct {
}

func (response AutocertUnlock204Response) VisitAutocertUnlockResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type AutocertLockRequestObject struct {
	LockName AutocertLockName `json:"lockName"`
	Params   AutocertLockParams
}

type AutocertLockResponseObject interface {
	VisitAutocertLockResponse(w http.ResponseWriter) error
}

type AutocertLock204Response struct {
}

func (response AutocertLock204Response) VisitAutocertLockResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetClusterBootstrapConfigRequestObject struct {
}

type GetClusterBootstrapConfigResponseObject interface {
	VisitGetClusterBootstrapConfigResponse(w http.ResponseWriter) error
}

type GetClusterBootstrapConfig200JSONResponse GetBootstrapConfigResponse

func (response GetClusterBootstrapConfig200JSONResponse) VisitGetClusterBootstrapConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterBootstrapConfig400JSONResponse ErrorResponse

func (response GetClusterBootstrapConfig400JSONResponse) VisitGetClusterBootstrapConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterBootstrapConfig500JSONResponse ErrorResponse

func (response GetClusterBootstrapConfig500JSONResponse) VisitGetClusterBootstrapConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceBundlesRequestObject struct {
}

type GetClusterResourceBundlesResponseObject interface {
	VisitGetClusterResourceBundlesResponse(w http.ResponseWriter) error
}

type GetClusterResourceBundles200JSONResponse GetBundlesResponse

func (response GetClusterResourceBundles200JSONResponse) VisitGetClusterResourceBundlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceBundles400JSONResponse ErrorResponse

func (response GetClusterResourceBundles400JSONResponse) VisitGetClusterResourceBundlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourceBundles500JSONResponse ErrorResponse

func (response GetClusterResourceBundles500JSONResponse) VisitGetClusterResourceBundlesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DownloadClusterResourceBundleRequestObject struct {
	BundleId BundleId `json:"bundleId"`
}

type DownloadClusterResourceBundleResponseObject interface {
	VisitDownloadClusterResourceBundleResponse(w http.ResponseWriter) error
}

type DownloadClusterResourceBundle200JSONResponse DownloadBundleResponse

func (response DownloadClusterResourceBundle200JSONResponse) VisitDownloadClusterResourceBundleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DownloadClusterResourceBundle400JSONResponse ErrorResponse

func (response DownloadClusterResourceBundle400JSONResponse) VisitDownloadClusterResourceBundleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DownloadClusterResourceBundle404JSONResponse ErrorResponse

func (response DownloadClusterResourceBundle404JSONResponse) VisitDownloadClusterResourceBundleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DownloadClusterResourceBundle500JSONResponse ErrorResponse

func (response DownloadClusterResourceBundle500JSONResponse) VisitDownloadClusterResourceBundleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReportClusterResourceBundleStatusRequestObject struct {
	BundleId BundleId `json:"bundleId"`
	Body     *ReportClusterResourceBundleStatusJSONRequestBody
}

type ReportClusterResourceBundleStatusResponseObject interface {
	VisitReportClusterResourceBundleStatusResponse(w http.ResponseWriter) error
}

type ReportClusterResourceBundleStatus204Response struct {
}

func (response ReportClusterResourceBundleStatus204Response) VisitReportClusterResourceBundleStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ReportClusterResourceBundleStatus400JSONResponse ErrorResponse

func (response ReportClusterResourceBundleStatus400JSONResponse) VisitReportClusterResourceBundleStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReportClusterResourceBundleStatus500JSONResponse ErrorResponse

func (response ReportClusterResourceBundleStatus500JSONResponse) VisitReportClusterResourceBundleStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ExchangeClusterIdentityTokenRequestObject struct {
	Body *ExchangeClusterIdentityTokenJSONRequestBody
}

type ExchangeClusterIdentityTokenResponseObject interface {
	VisitExchangeClusterIdentityTokenResponse(w http.ResponseWriter) error
}

type ExchangeClusterIdentityToken200JSONResponse ExchangeTokenResponse

func (response ExchangeClusterIdentityToken200JSONResponse) VisitExchangeClusterIdentityTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExchangeClusterIdentityToken400JSONResponse ErrorResponse

func (response ExchangeClusterIdentityToken400JSONResponse) VisitExchangeClusterIdentityTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExchangeClusterIdentityToken500JSONResponse ErrorResponse

func (response ExchangeClusterIdentityToken500JSONResponse) VisitExchangeClusterIdentityTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /autocert/files)
	AutocertList(ctx context.Context, request AutocertListRequestObject) (AutocertListResponseObject, error)

	// (DELETE /autocert/files/{key})
	AutocertDelete(ctx context.Context, request AutocertDeleteRequestObject) (AutocertDeleteResponseObject, error)

	// (GET /autocert/files/{key})
	AutocertLoad(ctx context.Context, request AutocertLoadRequestObject) (AutocertLoadResponseObject, error)

	// (HEAD /autocert/files/{key})
	AutocertStat(ctx context.Context, request AutocertStatRequestObject) (AutocertStatResponseObject, error)

	// (PUT /autocert/files/{key})
	AutocertStore(ctx context.Context, request AutocertStoreRequestObject) (AutocertStoreResponseObject, error)

	// (DELETE /autocert/locks/{lockName})
	AutocertUnlock(ctx context.Context, request AutocertUnlockRequestObject) (AutocertUnlockResponseObject, error)

	// (POST /autocert/locks/{lockName})
	AutocertLock(ctx context.Context, request AutocertLockRequestObject) (AutocertLockResponseObject, error)

	// (GET /bootstrap)
	GetClusterBootstrapConfig(ctx context.Context, request GetClusterBootstrapConfigRequestObject) (GetClusterBootstrapConfigResponseObject, error)

	// (GET /bundles)
	GetClusterResourceBundles(ctx context.Context, request GetClusterResourceBundlesRequestObject) (GetClusterResourceBundlesResponseObject, error)

	// (GET /bundles/{bundleId}/download)
	DownloadClusterResourceBundle(ctx context.Context, request DownloadClusterResourceBundleRequestObject) (DownloadClusterResourceBundleResponseObject, error)

	// (POST /bundles/{bundleId}/status)
	ReportClusterResourceBundleStatus(ctx context.Context, request ReportClusterResourceBundleStatusRequestObject) (ReportClusterResourceBundleStatusResponseObject, error)

	// (POST /exchangeToken)
	ExchangeClusterIdentityToken(ctx context.Context, request ExchangeClusterIdentityTokenRequestObject) (ExchangeClusterIdentityTokenResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AutocertList operation middleware
func (sh *strictHandler) AutocertList(w http.ResponseWriter, r *http.Request, params AutocertListParams) {
	var request AutocertListRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertList(ctx, request.(AutocertListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertListResponseObject); ok {
		if err := validResponse.VisitAutocertListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertDelete operation middleware
func (sh *strictHandler) AutocertDelete(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertDeleteParams) {
	var request AutocertDeleteRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertDelete(ctx, request.(AutocertDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertDeleteResponseObject); ok {
		if err := validResponse.VisitAutocertDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertLoad operation middleware
func (sh *strictHandler) AutocertLoad(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertLoadParams) {
	var request AutocertLoadRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertLoad(ctx, request.(AutocertLoadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertLoad")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertLoadResponseObject); ok {
		if err := validResponse.VisitAutocertLoadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertStat operation middleware
func (sh *strictHandler) AutocertStat(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStatParams) {
	var request AutocertStatRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertStat(ctx, request.(AutocertStatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertStat")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertStatResponseObject); ok {
		if err := validResponse.VisitAutocertStatResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertStore operation middleware
func (sh *strictHandler) AutocertStore(w http.ResponseWriter, r *http.Request, key AutocertKey, params AutocertStoreParams) {
	var request AutocertStoreRequestObject

	request.Key = key
	request.Params = params

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertStore(ctx, request.(AutocertStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertStoreResponseObject); ok {
		if err := validResponse.VisitAutocertStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertUnlock operation middleware
func (sh *strictHandler) AutocertUnlock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertUnlockParams) {
	var request AutocertUnlockRequestObject

	request.LockName = lockName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertUnlock(ctx, request.(AutocertUnlockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertUnlock")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertUnlockResponseObject); ok {
		if err := validResponse.VisitAutocertUnlockResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AutocertLock operation middleware
func (sh *strictHandler) AutocertLock(w http.ResponseWriter, r *http.Request, lockName AutocertLockName, params AutocertLockParams) {
	var request AutocertLockRequestObject

	request.LockName = lockName
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AutocertLock(ctx, request.(AutocertLockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AutocertLock")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AutocertLockResponseObject); ok {
		if err := validResponse.VisitAutocertLockResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterBootstrapConfig operation middleware
func (sh *strictHandler) GetClusterBootstrapConfig(w http.ResponseWriter, r *http.Request) {
	var request GetClusterBootstrapConfigRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterBootstrapConfig(ctx, request.(GetClusterBootstrapConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterBootstrapConfig")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterBootstrapConfigResponseObject); ok {
		if err := validResponse.VisitGetClusterBootstrapConfigResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetClusterResourceBundles operation middleware
func (sh *strictHandler) GetClusterResourceBundles(w http.ResponseWriter, r *http.Request) {
	var request GetClusterResourceBundlesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourceBundles(ctx, request.(GetClusterResourceBundlesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourceBundles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetClusterResourceBundlesResponseObject); ok {
		if err := validResponse.VisitGetClusterResourceBundlesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DownloadClusterResourceBundle operation middleware
func (sh *strictHandler) DownloadClusterResourceBundle(w http.ResponseWriter, r *http.Request, bundleId BundleId) {
	var request DownloadClusterResourceBundleRequestObject

	request.BundleId = bundleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadClusterResourceBundle(ctx, request.(DownloadClusterResourceBundleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadClusterResourceBundle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DownloadClusterResourceBundleResponseObject); ok {
		if err := validResponse.VisitDownloadClusterResourceBundleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportClusterResourceBundleStatus operation middleware
func (sh *strictHandler) ReportClusterResourceBundleStatus(w http.ResponseWriter, r *http.Request, bundleId BundleId) {
	var request ReportClusterResourceBundleStatusRequestObject

	request.BundleId = bundleId

	var body ReportClusterResourceBundleStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportClusterResourceBundleStatus(ctx, request.(ReportClusterResourceBundleStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportClusterResourceBundleStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportClusterResourceBundleStatusResponseObject); ok {
		if err := validResponse.VisitReportClusterResourceBundleStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeClusterIdentityToken operation middleware
func (sh *strictHandler) ExchangeClusterIdentityToken(w http.ResponseWriter, r *http.Request) {
	var request ExchangeClusterIdentityTokenRequestObject

	var body ExchangeClusterIdentityTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeClusterIdentityToken(ctx, request.(ExchangeClusterIdentityTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeClusterIdentityToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExchangeClusterIdentityTokenResponseObject); ok {
		if err := validResponse.VisitExchangeClusterIdentityTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
